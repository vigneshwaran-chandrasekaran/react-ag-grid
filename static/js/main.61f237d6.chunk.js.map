{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","users","setUsers","gridApi","setGridApi","useEffect","getRowData","console","log","axios","get","then","response","data","catch","error","finally","className","style","height","width","columnDefs","headerName","field","sortable","filter","resizable","checkboxSelection","rowData","animateRows","onGridReady","params","api","onClick","e","selectedNodes","getSelectedNodes","selectedData","map","node","selectedDataStringPresentation","email","username","join","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAyFeA,MAlFf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,qBAHjB,mBAGNG,EAHM,KAGGC,EAHH,KAqBbC,qBAAU,WAER,OADAC,IACO,WACLC,QAAQC,IAAIP,MAEb,IAEH,IAAMK,EAAa,WACjBG,IAAMC,IAAI,8CACPC,MAAK,SAAUC,GAEdV,EAASU,EAASC,SAEnBC,OAAM,SAAUC,GAEfR,QAAQC,IAAIO,MAEbC,SAAQ,WAEPT,QAAQC,IAAI,eAmBlB,OACE,6BACE,6CACA,yBACES,UAAU,gBACVC,MAAO,CACLC,OAAQ,QACRC,MAAO,SAGT,kBAAC,cAAD,CACEC,WAhEM,CAAC,CACXC,WAAY,KAAMC,MAAO,KAAMC,UAAU,EAAMC,QAAQ,EAAMC,WAAW,EAAMC,mBAAmB,GAChG,CACDL,WAAY,OAAQC,MAAO,OAAQC,UAAU,EAAMC,QAAQ,EAAMC,WAAW,GAC3E,CACDJ,WAAY,WAAYC,MAAO,WAAYC,UAAU,EAAMC,QAAQ,EAAMC,WAAW,GACnF,CACDJ,WAAY,QAASC,MAAO,QAASC,UAAU,EAAMC,QAAQ,EAAMC,WAAW,EAAMC,mBAAmB,GACtG,CACDL,WAAY,QAASC,MAAO,QAASC,UAAU,EAAMC,QAAQ,EAAMC,WAAW,GAC7E,CACDJ,WAAY,UAAWC,MAAO,UAAWC,UAAU,EAAMC,QAAQ,EAAMC,WAAW,IAsD9EE,QAAS3B,EACT4B,aAAW,EACXC,YA7BY,SAACC,GACnBxB,QAAQC,IAAIuB,GACZ3B,EAAW2B,EAAOC,QA8Bd,4BAAQC,QA3BQ,SAACC,GACrB3B,QAAQC,IAAI0B,GACZ,IAAMC,EAAgBhC,EAAQiC,mBAC9B7B,QAAQC,IAAI2B,GACZ,IAAME,EAAeF,EAAcG,KAAI,SAAAC,GAAI,OAAIA,EAAK1B,QACpDN,QAAQC,IAAI6B,GACZ,IAAMG,EAAiCH,EAAaC,KAAI,SAAAC,GAAI,OAAIA,EAAKE,MAAQ,IAAMF,EAAKG,YAAUC,KAAK,MACvGC,MAAM,mBAAD,OAAoBJ,MAoBrB,wBCvEYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.61f237d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-blue.css';\n\n\nfunction App() {\n\n  const [users, setUsers] = useState([]);\n  const [gridApi, setGridApi] = useState();\n\n  const gridData = {\n    columnDefs: [{\n      headerName: \"ID\", field: \"id\", sortable: true, filter: true, resizable: true, checkboxSelection: true\n    }, {\n      headerName: \"Name\", field: \"name\", sortable: true, filter: true, resizable: true\n    }, {\n      headerName: \"Username\", field: \"username\", sortable: true, filter: true, resizable: true\n    }, {\n      headerName: \"Email\", field: \"email\", sortable: true, filter: true, resizable: true, checkboxSelection: true\n    }, {\n      headerName: \"Phone\", field: \"phone\", sortable: true, filter: true, resizable: true\n    }, {\n      headerName: \"Website\", field: \"website\", sortable: true, filter: true, resizable: true\n    }]\n  };\n\n  useEffect(() => {\n    getRowData();\n    return () => {\n      console.log(users);\n    };\n  }, []);\n\n  const getRowData = () => {\n    axios.get('https://jsonplaceholder.typicode.com/users')\n      .then(function (response) {\n        // handle success\n        setUsers(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .finally(function () {\n        // always executed\n        console.log('finally');\n      });\n  };\n\n  const onGridReady = (params) => {\n    console.log(params);\n    setGridApi(params.api);\n  };\n\n  const onButtonClick = (e) => {\n    console.log(e);\n    const selectedNodes = gridApi.getSelectedNodes();\n    console.log(selectedNodes);\n    const selectedData = selectedNodes.map(node => node.data);\n    console.log(selectedData);\n    const selectedDataStringPresentation = selectedData.map(node => node.email + ' ' + node.username).join(', ');\n    alert(`Selected nodes: ${selectedDataStringPresentation}`);\n  };\n\n  return (\n    <div>\n      <h1>React ag grid</h1>\n      <div\n        className=\"ag-theme-blue\"\n        style={{\n          height: '500px',\n          width: 'auto'\n        }}\n      >\n        <AgGridReact\n          columnDefs={gridData.columnDefs}\n          rowData={users}\n          animateRows\n          onGridReady={onGridReady}\n        >\n        </AgGridReact>\n        <button onClick={onButtonClick}>Get selected rows</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}